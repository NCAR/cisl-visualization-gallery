<div id="gallery-filters-container">
    <div id="gallery-filters-prompt">
      <h3 id="gallery-filters-heading">Explore Visualizations by </h3>
      <div class="dropdown">
        <button class="dropdown-button">
          <span id="dropdown-value">topic</span>
          <span class="arrow"></span>
        </button>
        <div class="dropdown-content">
            <span class="selected-option" id="topic">topic</span>
            <span id="model">model</span>
            <span id="software">software</span>
        </div>
    </div>
    </div>
    <div id="filters-container"></div>
</div>

<style>
  /* ---- styles for heading and prompt ---- */
  #gallery-filters-container {
    padding: 2.5em 0 3.5em 0;
    background-color: white;
  }

  #gallery-filters-heading {
    color: #1B648F;
    font-weight: normal;
    text-align: center;
  }

  #gallery-filters-prompt::before,
  #gallery-filters-prompt::after {
    background-color: #1B648F;
    content: "";
    display: inline-block;
    height: 1px;
    position: relative;
    vertical-align: middle;
    width: 25%;
  }

  #gallery-filters-prompt::before {
    right: 0.5em;
    margin-left: -50%;
  }

  #gallery-filters-prompt::after {
    left: 0.5em;
    margin-right: -50%;
  }

  #gallery-filters-prompt {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1em;
  }

  /* ---- styles for the filter dropdown ---- */
  .dropdown {
    position: relative;
    display: inline-block;
  }

  button * {
    pointer-events: none;
  }

  .dropdown-button {
    color: #012269;
    border-radius: 1em;
    background-color: #A8C700;
    box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.50), 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
    border: none;
    cursor: pointer;
    font-family: 'Poppins';
    font-weight: 400;
    display: flex;
    align-items: center;
    gap: 0.5em;
  }

  .arrow {
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-top: 6px solid #012269;
    transition: transform ease-in-out 0.3s;
    display: block;
  }

  .active.arrow {
    transform: rotate(180deg);
  }

  .dropdown-button:hover {
    background-color: #1B648F;
    color: white;
    .arrow {
      border-top: 6px solid white;
    }
  }

  .dropdown-content {
    display: none;
    position: absolute;
    background-color: #f9f9f9;
    margin-top: 0.15em;
    min-width: 9em;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    z-index: 3;
    border-radius: 0.75em;
    overflow: hidden;
  }

  .dropdown-content span {
    color: black;
    padding: 0.75em 1em;
    text-decoration: none;
    display: block;
    cursor: pointer;
  }

  .dropdown-content span:hover {
    background-color: #e9e9e9;
  }

  .selected-option {
    font-weight: 600;
  }
</style>

<style is:global>
  #gallery-filters-heading {
    font-size: 1.5em;
  }

  .dropdown-button {
    font-size: 1.45em;
    padding: 0.1em 1em 0.1em 1.45em;
  }

  /* ---- styles for filter chips ---- */
  .filter-chip {
    font-family: 'Poppins';
    font-size: 1.05em;
    background-color: #FFF;
    color: #53565B;
    font-weight: 300;
    padding: 0.25em 0.75em;
    height: 'auto';
    border-radius: 0.75em;
    border: none;
    box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.25), 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
  }

  #filters-container {
    display: flex;
    flex-wrap: wrap;
    max-width: 65%;
    margin: auto;
    justify-content: center;
    align-items: center;
    gap: 0.65em;
    padding-top: 2.25em;
  }

  .filter-chip:hover {
    cursor: pointer;
  }

  .filter-chip:hover:not(.selected-filter) {
    background-color: #e9e9e9;
  }

  .selected-filter {
    background-color: #1B648F;
    color: white;
    padding: 0.25em 0.75em 0.25em 0.35em;
  }

  .checkmark {
    display: none;
    transform: rotate(45deg);
    height: 0.75em;
    width: 0.35em;
    border-bottom: 2px solid white;
    border-right: 2px solid white;
    margin: 0 0.5em 0.05em 0.5em;
  }

  .selected-filter > .checkmark {
    display: inline-block;
  }

  #clear-all {
    font-weight: 300;
    color: #53565B;
    text-decoration: underline;
    padding: 0 0.5em;
    font-size: 1.05em;
  }

  #clear-all:hover {
    cursor: pointer;
    color: #1B648F;
  }

  @media (max-width: 1020px) {
    #gallery-filters {
      padding: 2.5em 0 3em 0; 
    }

    #filters-container {
      max-width: 90%;
    }
  }

  @media (max-width: 780px) {
    #gallery-filters-heading {
      font-size: 1.35em;
    }

    .dropdown-button {
      font-size: 1.3em;
      padding: 0.1em 0.5em 0.1em 0.75em;
    }

    .filter-chip, #clear-all {
      font-size: 1em;
    }
  }

  @media (max-width: 550px) {
    #gallery-filters-heading {
      font-size: 1.15em;
    }

    .dropdown-button {
      font-size: 1.1em;
    }

    .filter-chip, #clear-all {
      font-size: 0.95em;
    }

    #filters-container {
      gap: 0.65em;
      max-width: 96%;
    }
  }

  @media (max-width: 400px) {
    #filters-container {
      max-width: 98%;
      padding-top: 1.5em;
    }

    #gallery-filters-container {
      padding: 2.5em 0 2em 0 !important;
    }

    #gallery-filters-prompt {
      flex-direction: column;
      gap: 0.65em !important;
      padding-bottom: 0.5em;
    }

    #gallery-filters-prompt::before,
    #gallery-filters-prompt::after {
      display: none !important;
    }

    .filter-chip, #clear-all {
      font-size: 0.75em;
    }
  }
</style>

<script>

  function generateGallery() {

    let topicFilters = ["atmosphere", "climate", "weather", "oceans", "sun-earth interactions", "fire dynamics", "solid earth", "recent publications", "experimental technologies"];
    let modelFilters = ["CAM", "CESM", "CM1", "CMAQ", "CT-ROMS", "DIABLO Large Eddy Simulation", "HRRR", "HWRF", "MPAS", "SIMA", "WACCM", "WRF"];
    let softwareFilters = ["Blender", "Maya", "NCAR Command Language", "ParaView", "Visual Comparator", "VAPOR"];

    let filters = {'topic' : topicFilters, 'model': modelFilters, 'software': softwareFilters}

    const dropdownButton = document.querySelector<HTMLElement>('.dropdown-button');
    const dropdownContent = document.querySelector<HTMLElement>('.dropdown-content');
    const [...dropdownOptions] : NodeListOf<Element> = document.querySelectorAll('.dropdown-content span');
    const dropdownArrow = document.querySelector<HTMLElement>('.arrow');
    const dropdownValue = document.querySelector<HTMLElement>('#dropdown-value');
    const filterChips = document.querySelector("#filters-container");
    let activeFilters = [];

    const [...cards] : NodeListOf<HTMLElement> = document.querySelectorAll('.card-container');
    const noCards = document.querySelector<HTMLElement>('#gallery-empty');

    // function for determining if a card should be shown or not based on the current active filters
    function shown(tagArray, activeFilters) {
      if (activeFilters.length === 0) {
        return true;
      }
      const tagSet = new Set(tagArray);
      return activeFilters.some(filter => tagSet.has(filter));
    }

    // function for applying filtering to cards based on current active filters
    function renderCards(activeFilters) {
      let returnCount = 0;
      cards.forEach(card => {
        let tagArray = card.dataset.tags.trim().split(" ");
        if (shown(tagArray, activeFilters)) {
          card.style.display = "block";
          returnCount += 1;
        } else {
          card.style.display = "none";
        }
      });
      noCards.style.display = (returnCount == 0) ? "flex" : "none";
    }
    renderCards(activeFilters);

    // handle clicking on filter chips
    function handleButtonClick(event) {
      const target = event.currentTarget;
      target.classList.toggle("selected-filter");

      if (target.classList.contains("selected-filter")) {
        activeFilters.push(target.id)
      } else {
        activeFilters = activeFilters.filter(item => item !== target.id);
      }
      renderCards(activeFilters);

      // allow user to clear all filters at once if any are selected
      if (activeFilters.length > 0) {
        document.querySelector("#clear-all").innerHTML = "clear all";
      } else {
        document.querySelector("#clear-all").innerHTML = "";
      }
    }

    // function for generating correct set of filter chips
    function generateFilters(dropdownValue: string) {
      filterChips.innerHTML = '';
      filters[dropdownValue].forEach( filter => {
        const currentElement = document.createElement("button");
        currentElement.innerHTML = "<span class='checkmark'></span> " + filter;
        currentElement.classList.add("filter-chip");
        currentElement.id = filter.replaceAll(" ", "-").toLowerCase();
        document.querySelector("#filters-container").appendChild(currentElement);
      })

      const clearAll = document.createElement("span");
      clearAll.setAttribute("id", "clear-all");
      document.querySelector("#filters-container").appendChild(clearAll);

      clearAll.addEventListener('click', () => {
        const [...chipCollection] : NodeListOf<HTMLElement> = document.querySelectorAll('.filter-chip');
        chipCollection.forEach(chip => {
          chip.classList.remove("selected-filter");
        })
        activeFilters = [];
        renderCards(activeFilters);
        clearAll.innerHTML = "";
      })

      const buttons = document.querySelectorAll('.filter-chip');
      buttons.forEach(button => {
          button.addEventListener('click', handleButtonClick);
      });
      activeFilters = [];
      renderCards(activeFilters);
    }
    generateFilters(dropdownValue.innerHTML);

    // handling when dropdown filter chip is clicked
    dropdownButton.addEventListener('click', () => {
      const isVisible = dropdownContent.style.display === 'block';
      dropdownContent.style.display = isVisible ? 'none' : 'block';
      dropdownArrow.classList.toggle("active");
    });

    // handling when a dropdown option is selected
    dropdownContent.addEventListener('click', (event) => {
      const target = event.target as HTMLElement;
      let newValue = target.innerHTML;
      dropdownValue.innerHTML = newValue;
      dropdownOptions.map((option) => option.classList.remove("selected-option"));
      document.querySelector<HTMLElement>(`#${newValue}`).classList.add("selected-option");
      generateFilters(newValue);
    });

    // close dropdown if clicked outside
    window.addEventListener('click', (event) => {
      const target = event.target as HTMLElement;
        if (!target.matches('.dropdown-button')) {
          if (dropdownContent.style.display === 'block') {
            dropdownContent.style.display = 'none';
            dropdownArrow.classList.toggle("active");
          }
        }
    });
  }
  generateGallery();

  document.addEventListener('astro:after-swap', () => {
    generateGallery();
  });
</script>